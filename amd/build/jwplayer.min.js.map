{"version":3,"sources":["../src/jwplayer.js"],"names":["define","jwplayer","$","ajax","log","module","player","context","eventMap","started","paused","seeked","resumed","completed","reqEventMap","init","playerSetup","playerId","length","Error","config","licensekey","key","playerinstance","setup","setupdata","downloadbtn","addButton","img","tttext","window","open","getPlaylistItem","file","events","forEach","eventName","getEventName","on","logEvent","logerrors","logError","event","error","message","mdlEventName","type","playReason","pauseReason","args","title","position","parseInt","getPosition","offset","when","call","methodname","fail","code","setupPlayer"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JW Player module.\n *\n * @module     media_jwplayer/jwplayer\n * @package    media_jwplayer\n * @copyright  2017 Ruslan Kabalin, Lancaster University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jwplayer', 'jquery', 'core/ajax', 'core/log', 'module'], function(jwplayer, $, ajax, log, module) {\n    var player = {\n        /** @var {Number} context ID of the page. */\n        context: null,\n\n        /** @var {Object} events map. */\n        eventMap: {\n            started:   'firstFrame',\n            paused:    'pause',\n            seeked:    'seek',\n            resumed:   'play',\n            completed: 'complete'\n        },\n\n        /** @var {Object} requested events map. */\n        reqEventMap: {},\n\n        /**\n         * Initialise the player instance.\n         *\n         * @method  init\n         * @param   {Object} playerSetup JW Player setup parameters.\n         * @param   {String} playerId    JW Player target element id.\n         * @param   {Number} context     The context of the current page.\n         */\n        init: function (playerSetup, playerId, context) {\n            player.context = context;\n\n            if (!$('#' + playerId).length) {\n                throw new Error('The target element for player setup (#' + playerId + ') is missing.');\n            }\n\n            if (module.config().licensekey) {\n                jwplayer.key = module.config().licensekey;\n            }\n\n            let playerinstance = jwplayer(playerId);\n            // Setup player.\n            playerinstance.setup(playerSetup.setupdata);\n\n            // Add download button if required.\n            if (typeof(playerSetup.downloadbtn) !== 'undefined') {\n                playerinstance.addButton(playerSetup.downloadbtn.img, playerSetup.downloadbtn.tttext, function() {\n                    // Grab the file that's currently playing.\n                    window.open(playerinstance.getPlaylistItem().file + '?forcedownload=true');\n                }, \"download\");\n            }\n\n            // Track required events and log them in Moodle.\n            playerSetup.events.forEach(function (eventName) {\n                if (typeof player.getEventName(eventName) === 'undefined') {\n                    throw new Error(\"Event tracking for '\" + eventName + \"' has no JWPlayer API event mapping.\");\n                }\n                player.reqEventMap[player.getEventName(eventName)] = eventName;\n                // Attach event processing callbacks.\n                playerinstance.on(player.getEventName(eventName), player.logEvent);\n            });\n\n            // Track errors and log them.\n            if (playerSetup.logerrors) {\n                playerinstance.on('error', player.logError);\n            }\n            playerinstance.on('error', function(event) {\n                // Log error to console.\n                log.error('media_jwplayer error: ' + event.message);\n            });\n            playerinstance.on('setupError', function(event) {\n                // Log setup error to console.\n                log.error('media_jwplayer setup error: ' + event.message);\n            });\n        },\n\n        /**\n         * Event mapping helper.\n         *\n         * @method getEventName\n         * @param  {String} mdlEventName media_jwplayer plugin event.\n         * @return {String}\n         */\n        getEventName: function(mdlEventName) {\n            return player.eventMap[mdlEventName];\n        },\n\n        /**\n         * Event logging.\n         *\n         * @method logEvent\n         * @param  {Object} event JW Player event.\n         */\n        logEvent: function(event) {\n            if (event.type === 'play' && event.playReason !== 'interaction') {\n                // Play event resulted not from user action, skipping.\n                return;\n            }\n            if (event.type === 'pause' && event.pauseReason !== 'interaction') {\n                // Pause event resulted not from user action, skipping.\n                return;\n            }\n\n            let args = {\n                context:    player.context,\n                event:      player.reqEventMap[event.type],\n                title:      this.getPlaylistItem().file,\n                position:   parseInt(this.getPosition())\n            };\n\n            if (typeof this.getPlaylistItem().title !== 'undefined') {\n                // If title is defined, use it.\n                args.title = this.getPlaylistItem().title;\n            }\n\n            if (event.type === 'seek') {\n                // Offset is only valid for 'seek' event.\n                args.offset = parseInt(event.offset);\n            }\n\n            // Perform webservice call.\n            $.when(\n                ajax.call([\n                    {\n                        methodname: 'media_jwplayer_playback_event',\n                        args: args\n                    }\n                ])[0]\n            ).fail(log.error);\n        },\n\n        /**\n         * Error logging.\n         *\n         * @method logError\n         * @param  {Object} event JW Player event.\n         */\n        logError: function(event) {\n            // Error needs to be replayed and logged.\n            let args = {\n                context:    player.context,\n                title:      this.getPlaylistItem().file,\n                position:   parseInt(this.getPosition()),\n                code:       event.code,\n                message:    event.message\n            };\n\n            if (typeof this.getPlaylistItem().title !== 'undefined') {\n                // If title is defined, use it.\n                args.title = this.getPlaylistItem().title;\n            }\n\n            // Perform webservice call.\n            $.when(\n                ajax.call([\n                    {\n                        methodname: 'media_jwplayer_playback_failed',\n                        args: args\n                    }\n                ])[0]\n            ).fail(log.error);\n        }\n    };\n\n    return /** @alias module:media_jwplayer/jwplayer */ {\n        /**\n         * Setup player instance.\n         *\n         * @method  setupPlayer\n         * @param   {Object} playerSetup JW Player setup parameters.\n         * @param   {String} playerId    JW Player target element id.\n         * @param   {Number} context     The context of the current page.\n         */\n        setupPlayer: player.init\n    };\n});"],"file":"jwplayer.min.js"}