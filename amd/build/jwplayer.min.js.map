{"version":3,"file":"jwplayer.min.js","sources":["../src/jwplayer.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JW Player module.\n *\n * @module     media_jwplayer/jwplayer\n * @copyright  2017 Ruslan Kabalin, Lancaster University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine([\n    'jwplayer',\n    'jquery',\n    'core/ajax',\n    'core/log',\n    'module',\n    'core/config',\n    'core/str'\n], function(jwplayer, $, ajax, log, module, config, str) {\n    var player = {\n        /** @var {Number} context ID of the page. */\n        context: null,\n\n        /** @var {Object} events map. */\n        eventMap: {\n            started:   'firstFrame',\n            paused:    'pause',\n            seeked:    'seek',\n            resumed:   'play',\n            completed: 'complete'\n        },\n\n        /** @var {Object} requested events map. */\n        reqEventMap: {},\n\n        /**\n         * Initialise the player instance.\n         *\n         * @method  init\n         * @param   {Object} playerSetup JW Player setup parameters.\n         * @param   {String} playerId    JW Player target element id.\n         * @param   {Number} context     The context of the current page.\n         */\n        init: function(playerSetup, playerId, context) {\n            player.context = context;\n\n            if (!$('#' + playerId).length) {\n                throw new Error('The target element for player setup (#' + playerId + ') is missing.');\n            }\n\n            if (module.config().licensekey) {\n                jwplayer.key = module.config().licensekey;\n            }\n\n            // Setup player.\n            let playerInstance = jwplayer(playerId);\n            playerInstance.setup(playerSetup.setupdata);\n\n            // Add download button if required.\n            if (playerSetup.showdownloadbtn) {\n                player.addDownloadButton(playerInstance);\n            }\n\n            // Track required events and log them in Moodle.\n            playerSetup.events.forEach(function(eventName) {\n                if (typeof player.getEventName(eventName) === 'undefined') {\n                    throw new Error(\"Event tracking for '\" + eventName + \"' has no JWPlayer API event mapping.\");\n                }\n                player.reqEventMap[player.getEventName(eventName)] = eventName;\n                // Attach event processing callbacks.\n                playerInstance.on(player.getEventName(eventName), player.logEvent);\n            });\n\n            // Track errors and log them.\n            if (playerSetup.logerrors) {\n                playerInstance.on('error', player.logError);\n            }\n            playerInstance.on('error', function(event) {\n                // Log error to console.\n                log.error('media_jwplayer error: ' + event.message);\n            });\n            playerInstance.on('setupError', function(event) {\n                // Log setup error to console.\n                log.error('media_jwplayer setup error: ' + event.message);\n            });\n        },\n\n        /**\n         * Add download button.\n         *\n         * @method addDownloadButton\n         * @param  {Object} playerInstance JW Player instance.\n         */\n        addDownloadButton: function(playerInstance) {\n            str.get_string('downloadbuttontitle', 'media_jwplayer').done(function(tooltip) {\n                const iconPath = config.wwwroot + '/media/player/jwplayer/pix/download.svg';\n                playerInstance.addButton(iconPath, tooltip, function() {\n                    // Grab the file that's currently playing.\n                    window.open(playerInstance.getPlaylistItem().file + '?forcedownload=true');\n                }, \"download\");\n            }).fail(log.error);\n        },\n        /**\n         * Event mapping helper.\n         *\n         * @method getEventName\n         * @param  {String} mdlEventName media_jwplayer plugin event.\n         * @return {String}\n         */\n        getEventName: function(mdlEventName) {\n            return player.eventMap[mdlEventName];\n        },\n\n        /**\n         * Event logging.\n         *\n         * @method logEvent\n         * @param  {Object} event JW Player event.\n         */\n        logEvent: function(event) {\n            if (event.type === 'play' && event.playReason !== 'interaction') {\n                // Play event resulted not from user action, skipping.\n                return;\n            }\n            if (event.type === 'pause' && event.pauseReason !== 'interaction') {\n                // Pause event resulted not from user action, skipping.\n                return;\n            }\n\n            let args = {\n                context:    player.context,\n                event:      player.reqEventMap[event.type],\n                title:      this.getPlaylistItem().file,\n                position:   parseInt(this.getPosition()),\n                medialength: parseInt(this.getDuration())\n            };\n\n            if (typeof this.getPlaylistItem().title !== 'undefined') {\n                // If title is defined, use it.\n                args.title = this.getPlaylistItem().title;\n            }\n\n            if (event.type === 'seek') {\n                // Offset is only valid for 'seek' event.\n                args.offset = parseInt(event.offset);\n            }\n\n            // Perform webservice call.\n            $.when(\n                ajax.call([\n                    {\n                        methodname: 'media_jwplayer_playback_event',\n                        args: args\n                    }\n                ])[0]\n            ).fail(log.error);\n        },\n\n        /**\n         * Error logging.\n         *\n         * @method logError\n         * @param  {Object} event JW Player event.\n         */\n        logError: function(event) {\n            // Error needs to be replayed and logged.\n            let args = {\n                context:    player.context,\n                title:      this.getPlaylistItem().file,\n                position:   parseInt(this.getPosition()),\n                code:       event.code,\n                message:    event.message\n            };\n\n            if (typeof this.getPlaylistItem().title !== 'undefined') {\n                // If title is defined, use it.\n                args.title = this.getPlaylistItem().title;\n            }\n\n            // Perform webservice call.\n            $.when(\n                ajax.call([\n                    {\n                        methodname: 'media_jwplayer_playback_failed',\n                        args: args\n                    }\n                ])[0]\n            ).fail(log.error);\n        }\n    };\n\n    return /** @alias module:media_jwplayer/jwplayer */ {\n        /**\n         * Setup player instance.\n         *\n         * @method  setupPlayer\n         * @param   {Object} playerSetup JW Player setup parameters.\n         * @param   {String} playerId    JW Player target element id.\n         * @param   {Number} context     The context of the current page.\n         */\n        setupPlayer: player.init\n    };\n});\n"],"names":["define","jwplayer","$","ajax","log","module","config","str","player","context","eventMap","started","paused","seeked","resumed","completed","reqEventMap","init","playerSetup","playerId","length","Error","licensekey","key","playerInstance","setup","setupdata","showdownloadbtn","addDownloadButton","events","forEach","eventName","getEventName","on","logEvent","logerrors","logError","event","error","message","get_string","done","tooltip","iconPath","wwwroot","addButton","window","open","getPlaylistItem","file","fail","mdlEventName","type","playReason","pauseReason","args","title","this","position","parseInt","getPosition","medialength","getDuration","offset","when","call","methodname","code","setupPlayer"],"mappings":";;;;;;;AAsBAA,iCAAO,CACH,WACA,SACA,YACA,WACA,SACA,cACA,aACD,SAASC,SAAUC,EAAGC,KAAMC,IAAKC,OAAQC,OAAQC,SAC5CC,OAAS,CAETC,QAAS,KAGTC,SAAU,CACNC,QAAW,aACXC,OAAW,QACXC,OAAW,OACXC,QAAW,OACXC,UAAW,YAIfC,YAAa,GAUbC,KAAM,SAASC,YAAaC,SAAUV,YAClCD,OAAOC,QAAUA,SAEZP,EAAE,IAAMiB,UAAUC,aACb,IAAIC,MAAM,yCAA2CF,SAAW,iBAGtEd,OAAOC,SAASgB,aAChBrB,SAASsB,IAAMlB,OAAOC,SAASgB,gBAI/BE,eAAiBvB,SAASkB,UAC9BK,eAAeC,MAAMP,YAAYQ,WAG7BR,YAAYS,iBACZnB,OAAOoB,kBAAkBJ,gBAI7BN,YAAYW,OAAOC,SAAQ,SAASC,mBACc,IAAnCvB,OAAOwB,aAAaD,iBACrB,IAAIV,MAAM,uBAAyBU,UAAY,wCAEzDvB,OAAOQ,YAAYR,OAAOwB,aAAaD,YAAcA,UAErDP,eAAeS,GAAGzB,OAAOwB,aAAaD,WAAYvB,OAAO0B,aAIzDhB,YAAYiB,WACZX,eAAeS,GAAG,QAASzB,OAAO4B,UAEtCZ,eAAeS,GAAG,SAAS,SAASI,OAEhCjC,IAAIkC,MAAM,yBAA2BD,MAAME,YAE/Cf,eAAeS,GAAG,cAAc,SAASI,OAErCjC,IAAIkC,MAAM,+BAAiCD,MAAME,aAUzDX,kBAAmB,SAASJ,gBACxBjB,IAAIiC,WAAW,sBAAuB,kBAAkBC,MAAK,SAASC,eAC5DC,SAAWrC,OAAOsC,QAAU,0CAClCpB,eAAeqB,UAAUF,SAAUD,SAAS,WAExCI,OAAOC,KAAKvB,eAAewB,kBAAkBC,KAAO,yBACrD,eACJC,KAAK9C,IAAIkC,QAShBN,aAAc,SAASmB,qBACZ3C,OAAOE,SAASyC,eAS3BjB,SAAU,SAASG,UACI,SAAfA,MAAMe,MAAwC,gBAArBf,MAAMgB,qBAIhB,UAAfhB,MAAMe,MAA0C,gBAAtBf,MAAMiB,uBAKhCC,KAAO,CACP9C,QAAYD,OAAOC,QACnB4B,MAAY7B,OAAOQ,YAAYqB,MAAMe,MACrCI,MAAYC,KAAKT,kBAAkBC,KACnCS,SAAYC,SAASF,KAAKG,eAC1BC,YAAaF,SAASF,KAAKK,qBAGa,IAAjCL,KAAKT,kBAAkBQ,QAE9BD,KAAKC,MAAQC,KAAKT,kBAAkBQ,OAGrB,SAAfnB,MAAMe,OAENG,KAAKQ,OAASJ,SAAStB,MAAM0B,SAIjC7D,EAAE8D,KACE7D,KAAK8D,KAAK,CACN,CACIC,WAAY,gCACZX,KAAMA,QAEX,IACLL,KAAK9C,IAAIkC,QASfF,SAAU,SAASC,WAEXkB,KAAO,CACP9C,QAAYD,OAAOC,QACnB+C,MAAYC,KAAKT,kBAAkBC,KACnCS,SAAYC,SAASF,KAAKG,eAC1BO,KAAY9B,MAAM8B,KAClB5B,QAAYF,MAAME,cAGsB,IAAjCkB,KAAKT,kBAAkBQ,QAE9BD,KAAKC,MAAQC,KAAKT,kBAAkBQ,OAIxCtD,EAAE8D,KACE7D,KAAK8D,KAAK,CACN,CACIC,WAAY,iCACZX,KAAMA,QAEX,IACLL,KAAK9C,IAAIkC,eAIiC,CAShD8B,YAAa5D,OAAOS"}