{"version":3,"sources":["../src/jwplayer.js"],"names":["define","jwplayer","$","mdlconfig","Y","log","module","logcontext","logevent","event","playerinstance","config","method","data","sesskey","JSON","stringify","getPlaylistItem","title","file","getPosition","getCurrentQuality","bitrate","on","failure","o","error","type","setTimeout","position","qualitylevel","getQualityLevels","audiotracks","getAudioTracks","captions","getCaptionsList","io","wwwroot","logerror","message","setupPlayer","playersetup","licensekey","key","playerid","length","setup","setupdata","downloadbtn","addButton","img","tttext","window","open","logevents","forEach","eventname"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * JW Player module.\n *\n * @module     media_jwplayer/jwplayer\n * @package    media_jwplayer\n * @copyright  2017 Ruslan Kabalin, Lancaster University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\ndefine(['jwplayer', 'jquery', 'core/config', 'core/yui', 'core/log', 'module'], function(jwplayer, $, mdlconfig, Y, log, module) {\n\n    // Private functions and variables.\n    /** @var {int} logcontext Moodle page context id. */\n    var logcontext = null;\n\n    /**\n     * Event logging. Called when player event is triggered.\n     *\n     * @method logevent\n     * @private\n     * @param {Object[]} event JW Player event.\n     */\n    var logevent = function(event) {\n        var playerinstance = this;\n        var config = {\n            method: 'POST',\n            data:  {\n                'sesskey' : mdlconfig.sesskey,\n                'event': JSON.stringify(event),\n                'id': logcontext,\n                'title': playerinstance.getPlaylistItem().title,\n                'file': playerinstance.getPlaylistItem().file,\n                'position': playerinstance.getPosition(),\n                'bitrate': playerinstance.getCurrentQuality().bitrate,\n            },\n            on: {\n                failure: function(o) {\n                    log.error(o);\n                }\n            }\n        };\n\n        if (event.type == \"play\") {\n            // For play events wait a short time before setting position so it picks up new position after seeks.\n            setTimeout(function(){config.data.position = playerinstance.getPosition();}, 10);\n        }\n\n        if (event.type == \"levelsChanged\") {\n            // Pass information of quality levels for quality level events.\n            config.data.qualitylevel = JSON.stringify(playerinstance.getQualityLevels());\n        }\n        if (event.type == \"audioTrackChanged\") {\n            // Pass information of audio tracks for audio track events.\n            config.data.audiotracks = JSON.stringify(playerinstance.getAudioTracks());\n        }\n        if (event.type == \"captionsChanged\") {\n            // Pass information of captions for caption events.\n            config.data.captions = JSON.stringify(playerinstance.getCaptionsList());\n        }\n\n        // log.debug(config.data);\n        Y.io(mdlconfig.wwwroot + '/media/player/jwplayer/eventlogger.php', config);\n    };\n\n    /**\n     * Error logging. Called when player error event is triggered.\n     *\n     * @method logevent\n     * @private\n     * @param {Object[]} event JW Player event.\n     */\n    var logerror = function(event) {\n        if (this.getPlaylistItem()) {\n            log.error(this.getPlaylistItem().title + ' ' + event.type + ': ' + event.message);\n        } else {\n            log.error(event.message);\n        }\n    };\n\n    return {\n        /**\n         * Setup player instance.\n         *\n         * @method init\n         * @param {Object[]} playersetup JW Player setup parameters.\n         * @return {void}\n         */\n        setupPlayer: function (playersetup) {\n            if (module.config().licensekey) {\n                jwplayer.key = module.config().licensekey;\n            }\n\n            logcontext = playersetup.logcontext;\n            if (!$('#' + playersetup.playerid).length) {\n                return;\n            }\n            var playerinstance = jwplayer(playersetup.playerid);\n            playerinstance.setup(playersetup.setupdata);\n\n            // Add download button if required.\n            if (typeof(playersetup.downloadbtn) !== 'undefined') {\n                playerinstance.addButton(playersetup.downloadbtn.img, playersetup.downloadbtn.tttext, function() {\n                    // Grab the file that's currently playing.\n                    window.open(playerinstance.getPlaylistItem().file + '?forcedownload=true');\n                }, \"download\");\n            }\n\n            // Track errors and log them in browser console.\n            playerinstance.on('setupError', logerror);\n            playerinstance.on('error', logerror);\n\n            // Track required events and log them in Moodle.\n            playersetup.logevents.forEach(function (eventname) {\n                playerinstance.on(eventname, logevent);\n            });\n        }\n    };\n});"],"file":"jwplayer.min.js"}